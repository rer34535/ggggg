import React, { useState } from 'react';
import { Hash, Calculator, Sparkles, Bot, Zap } from 'lucide-react';
import OpenAI from 'openai';

const GematriCalculator: React.FC = () => {
  const [text, setText] = useState('');
  const [gematriaType, setGematriaType] = useState('ูุจูุฑ');
  const [result, setResult] = useState<any>(null);
  const [isCalculating, setIsCalculating] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [aiAnalysis, setAiAnalysis] = useState<string>('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const arabicGematriaKabir: { [key: string]: number } = {
    'ุง': 1, 'ุฃ': 1, 'ุฅ': 1, 'ุข': 1,
    'ุจ': 2, 'ุฌ': 3, 'ุฏ': 4, 'ู': 5, 'ู': 6, 'ุฒ': 7, 'ุญ': 8, 'ุท': 9,
    'ู': 10, 'ู': 20, 'ู': 30, 'ู': 40, 'ู': 50, 'ุณ': 60, 'ุน': 70, 'ู': 80, 'ุต': 90,
    'ู': 100, 'ุฑ': 200, 'ุด': 300, 'ุช': 400, 'ุซ': 500, 'ุฎ': 600, 'ุฐ': 700, 'ุถ': 800, 'ุธ': 900, 'ุบ': 1000
  };

  const arabicGematriaSaghir: { [key: string]: number } = {
    'ุง': 1, 'ุฃ': 1, 'ุฅ': 1, 'ุข': 1,
    'ุจ': 2, 'ุฌ': 3, 'ุฏ': 4, 'ู': 5, 'ู': 6, 'ุฒ': 7, 'ุญ': 8, 'ุท': 9,
    'ู': 1, 'ู': 2, 'ู': 3, 'ู': 4, 'ู': 5, 'ุณ': 6, 'ุน': 7, 'ู': 8, 'ุต': 9,
    'ู': 1, 'ุฑ': 2, 'ุด': 3, 'ุช': 4, 'ุซ': 5, 'ุฎ': 6, 'ุฐ': 7, 'ุถ': 8, 'ุธ': 9, 'ุบ': 1
  };

  const arabicGematriaMuqatta: { [key: string]: number } = {
    'ุง': 1, 'ุฃ': 1, 'ุฅ': 1, 'ุข': 1,
    'ุจ': 2, 'ุฌ': 3, 'ุฏ': 4, 'ู': 5, 'ู': 6, 'ุฒ': 7, 'ุญ': 8, 'ุท': 9,
    'ู': 10, 'ู': 11, 'ู': 12, 'ู': 13, 'ู': 14, 'ุณ': 15, 'ุน': 16, 'ู': 17, 'ุต': 18,
    'ู': 19, 'ุฑ': 20, 'ุด': 21, 'ุช': 22, 'ุซ': 23, 'ุฎ': 24, 'ุฐ': 25, 'ุถ': 26, 'ุธ': 27, 'ุบ': 28
  };

  const getGematriaTable = () => {
    switch (gematriaType) {
      case 'ุตุบูุฑ': return arabicGematriaSaghir;
      case 'ููุทุน': return arabicGematriaMuqatta;
      default: return arabicGematriaKabir;
    }
  };

  const calculateGematria = async () => {
    if (!text.trim()) return;
    
    setIsCalculating(true);
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const gematriaTable = getGematriaTable();
    let total = 0;
    const letterValues: { letter: string; value: number }[] = [];
    
    for (const char of text) {
      if (gematriaTable[char]) {
        total += gematriaTable[char];
        letterValues.push({ letter: char, value: gematriaTable[char] });
      }
    }
    
    const reducedNumber = total.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);
    
    const interpretations = {
      1: 'ุงููุญุฏุฉ ูุงูููุงุฏุฉ - ุทุงูุฉ ุงูุจุฏุงูุฉ ูุงูุฅุจุฏุงุน',
      2: 'ุงูุชุนุงูู ูุงูุดุฑุงูุฉ - ุทุงูุฉ ุงูุชูุงุฒู ูุงูุฏุจูููุงุณูุฉ',
      3: 'ุงูุฅุจุฏุงุน ูุงูุชุนุจูุฑ - ุทุงูุฉ ุงููู ูุงูุชูุงุตู',
      4: 'ุงูุงุณุชูุฑุงุฑ ูุงูุนูู ุงูุฌุงุฏ - ุทุงูุฉ ุงูุจูุงุก ูุงูุชูุธูู',
      5: 'ุงูุญุฑูุฉ ูุงููุบุงูุฑุฉ - ุทุงูุฉ ุงูุชุบููุฑ ูุงูุญุฑูุฉ',
      6: 'ุงููุณุคูููุฉ ูุงูุฑุนุงูุฉ - ุทุงูุฉ ุงูุญุจ ูุงูุฎุฏูุฉ',
      7: 'ุงูุฑูุญุงููุฉ ูุงูุญููุฉ - ุทุงูุฉ ุงูุจุญุซ ูุงูุชุฃูู',
      8: 'ุงูููุฉ ุงููุงุฏูุฉ ูุงููุฌุงุญ - ุทุงูุฉ ุงูุฅูุฌุงุฒ ูุงูุณูุทุฉ',
      9: 'ุงูุฅูุณุงููุฉ ูุงูุนุทุงุก - ุทุงูุฉ ุงูููุงู ูุงูุชุถุญูุฉ'
    };

    const energySymbols = [
      'ุฑูุฒ ุงูููุฑ ุงูุฃุฒุฑู', 'ุฑูุฒ ุงูุญููุฉ ุงูุฐูุจูุฉ', 'ุฑูุฒ ุงูุญุจ ุงููุฑุฏู', 'ุฑูุฒ ุงูููุฉ ุงูุญูุฑุงุก',
      'ุฑูุฒ ุงูุณูุงู ุงูุฃุฎุถุฑ', 'ุฑูุฒ ุงูุญุฏุณ ุงูุจููุณุฌู', 'ุฑูุฒ ุงูุชุญูู ุงููุถู', 'ุฑูุฒ ุงูุดูุงุก ุงููุฑูุณุชุงูู'
    ];
    
    setResult({
      originalText: text,
      gematriaType,
      totalValue: total,
      reducedNumber,
      letterValues,
      interpretation: interpretations[reducedNumber as keyof typeof interpretations] || 'ุฑูู ุฎุงุต ุจุทุงูุฉ ูุฑูุฏุฉ ููููุฒุฉ',
      energySymbol: energySymbols[reducedNumber % energySymbols.length],
      hiddenMeaning: 'ูุฐู ุงูุฃุฑูุงู ููุณุช ุนุดูุงุฆูุฉุ ุจู ููุงุชูุญ ูุจูุงุจุงุช ุบูุจูุฉ ูุง ุชููุชุญ ุฅูุง ุจุงูููุฉ ูุงููุนุฑูุฉ.'
    });
    
    setIsCalculating(false);
  };

  const getAIAnalysis = async (calculationResult: any) => {
    if (!apiKey.trim()) return;
    
    setIsAnalyzing(true);
    
    try {
      const openai = new OpenAI({
        baseURL: "https://openrouter.ai/api/v1",
        apiKey: apiKey,
        defaultHeaders: {
          "HTTP-Referer": window.location.origin,
          "X-Title": "Al-Araf - Gematria Calculator",
        },
        dangerouslyAllowBrowser: true
      });

      const prompt = `ุฃูุช ุฎุจูุฑ ูู ุญุณุงุจ ุงูุฌูููู ูุงูุฃุฑูุงู ุงูุฑูุญุงููุฉ. ูู ุจุชุญููู ูุฐู ุงููุชูุฌุฉ:

ุงููุต: "${calculationResult.originalText}"
ููุน ุงูุญุณุงุจ: ${calculationResult.gematriaType}
ุงููููุฉ ุงูุฅุฌูุงููุฉ: ${calculationResult.totalValue}
ุงูุฑูู ุงููุฎุชุฒู: ${calculationResult.reducedNumber}

ูุฏู ุชุญูููุงู ุฑูุญุงููุงู ููุตูุงู ูุดูู:
1. ุงููุนูู ุงูุฑูุญุงูู ุงูุนููู ููุฑูู
2. ุงูุทุงูุงุช ูุงูุฐุจุฐุจุงุช ุงููุฑุชุจุทุฉ
3. ุงูุชุฃุซูุฑุงุช ุนูู ุงูุดุฎุตูุฉ ูุงูุญูุงุฉ
4. ุงููุตุงุฆุญ ูุงูุชูุฌููุงุช ุงูุฑูุญุงููุฉ
5. ุงูุฃุฑูุงู ุงููุญุธูุธุฉ ูุงูุฃููุงู ุงูููุงุณุจุฉ

ุงุณุชุฎุฏู ูุบุฉ ุฑูุญุงููุฉ ุนูููุฉ ููููููุฉ.`;

      const completion = await openai.chat.completions.create({
        model: 'google/gemini-2.0-flash-exp:free',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.8,
        max_tokens: 1500
      });

      setAiAnalysis(completion.choices[0].message.content || 'ูู ุฃุชููู ูู ุงูุญุตูู ุนูู ุชุญููู.');
    } catch (error) {
      console.error('Error:', error);
      setAiAnalysis('ุญุฏุซ ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุชุญููู ุงูุฐูู. ุชุฃูุฏ ูู ุตุญุฉ ููุชุงุญ API.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  return (
    <div className="min-h-screen pt-20 pb-12 px-6">
      <div className="container mx-auto max-w-4xl">
        <div className="text-center mb-12">
          <h2 className="text-5xl font-bold mb-6 bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 bg-clip-text text-transparent">
            <Hash className="inline-block w-12 h-12 ml-4" />
            ๐ข ุญุณุงุจ ุงูุฌูููู
          </h2>
          <div className="bg-gradient-to-r from-green-900/50 to-blue-900/50 backdrop-blur-lg rounded-2xl p-6 border border-green-500/30 mb-8">
            <p className="text-lg text-gray-300 leading-relaxed">
              ุงูุชุจ ุงูุงุณู ุฃู ุงูุฌููุฉ ุงูุชู ุชุฑูุฏ ูุดู ูุนูุงูุงุ ูุน ุชุญุฏูุฏ ููุน ุงูุฌูููู (ุงููุจูุฑ ุฃู ุงูุตุบูุฑ ุฃู ุงูููุทูุน)ุ ูุณูุญุณุจ ูู ุงููููุฉ ุงูุนุฏุฏูุฉ ุจุฏูุฉ ูุงุฆูุฉุ ูููุดู ุงูุฑููุฒ ุงูุทุงููุฉ ุงูุฎููุฉ ุงููุชุตูุฉ ุจุนุงูู ุงูุฃุณูุงุก ูุงูุทุจุงุฆุน.
            </p>
            <p className="text-cyan-300 mt-3 font-medium">
              โจ ูุฐู ุงูุฃุฑูุงู ููุณุช ุนุดูุงุฆูุฉุ ุจู ููุงุชูุญ ูุจูุงุจุงุช ุบูุจูุฉ ูุง ุชููุชุญ ุฅูุง ุจุงูููุฉ ูุงููุนุฑูุฉ.
            </p>
          </div>
        </div>

        {/* AI Analysis Section */}
        <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20 mb-8">
          <h3 className="text-2xl font-bold mb-6 text-cyan-300 flex items-center gap-3">
            <Bot className="w-6 h-6" />
            ุงูุชุญููู ุงูุฐูู ุงููุชูุฏู
          </h3>
          
          <div className="mb-6">
            <label className="block text-lg font-medium mb-3 text-cyan-300">
              ููุชุงุญ OpenRouter API (ุงุฎุชูุงุฑู ููุชุญููู ุงูุฐูู)
            </label>
            <input
              type="password"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              className="w-full px-4 py-3 rounded-xl bg-white/10 border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="ุฃุฏุฎู ููุชุงุญ API ููุญุตูู ุนูู ุชุญููู ุฐูู ููุตู"
            />
          </div>
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-8 border border-white/20 mb-8">
          <div className="mb-6">
            <label className="block text-lg font-medium mb-3 text-cyan-300">
              <Calculator className="inline-block w-5 h-5 ml-2" />
              ุงููุต ุงููุฑุงุฏ ุญุณุงุจู
            </label>
            <textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              className="w-full px-4 py-3 rounded-xl bg-white/10 border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent resize-none"
              placeholder="ุฃุฏุฎู ุงููุต ุฃู ุงูุงุณู ุงููุฑุงุฏ ุญุณุงุจ ูููุชู ุงูุนุฏุฏูุฉ"
              rows={4}
            />
          </div>

          <div className="mb-6">
            <label className="block text-lg font-medium mb-3 text-cyan-300">
              ููุน ุญุณุงุจ ุงูุฌูููู
            </label>
            <div className="grid grid-cols-3 gap-4">
              {['ูุจูุฑ', 'ุตุบูุฑ', 'ููุทุน'].map((type) => (
                <button
                  key={type}
                  onClick={() => setGematriaType(type)}
                  className={`px-4 py-3 rounded-xl font-medium transition-all duration-300 ${
                    gematriaType === type
                      ? 'bg-gradient-to-r from-green-500 to-blue-600 text-white shadow-lg'
                      : 'bg-white/10 border border-white/30 text-white/80 hover:bg-white/20'
                  }`}
                >
                  ุงูุฌูููู ุงู{type}
                </button>
              ))}
            </div>
          </div>

          <button
            onClick={calculateGematria}
            disabled={isCalculating || !text.trim()}
            className="w-full bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 text-white font-bold py-4 px-8 rounded-xl text-lg transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-green-500/40 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
          >
            <div className="flex items-center justify-center gap-3">
              <Sparkles className={`w-6 h-6 ${isCalculating ? 'animate-spin' : ''}`} />
              {isCalculating ? 'ุฌุงุฑู ูุดู ุงูุฑููุฒ ุงูุทุงููุฉ...' : 'ุงุญุณุจ ุงููููุฉ ุงูุนุฏุฏูุฉ'}
            </div>
          </button>
        </div>

        {result && (
          <div className="bg-gradient-to-br from-green-900/50 to-blue-900/50 backdrop-blur-lg rounded-3xl p-8 border border-green-500/30 animate-fadeIn">
            <h3 className="text-3xl font-bold text-center mb-8 text-green-300">
              ูุชุงุฆุฌ ุญุณุงุจ ุงูุฌูููู
            </h3>
            
            <div className="grid md:grid-cols-2 gap-8 mb-8">
              <div className="bg-white/10 rounded-2xl p-6">
                <h4 className="text-xl font-bold mb-3 text-cyan-300">ุงููุต ุงูุฃุตูู</h4>
                <p className="text-lg text-yellow-400 font-medium">{result.originalText}</p>
              </div>
              
              <div className="bg-white/10 rounded-2xl p-6">
                <h4 className="text-xl font-bold mb-3 text-cyan-300">ููุน ุงูุญุณุงุจ</h4>
                <p className="text-lg text-purple-400">ุงูุฌูููู ุงู{result.gematriaType}</p>
              </div>
              
              <div className="bg-white/10 rounded-2xl p-6">
                <h4 className="text-xl font-bold mb-3 text-cyan-300">ุงููููุฉ ุงูุฅุฌูุงููุฉ</h4>
                <p className="text-3xl font-bold text-green-400">{result.totalValue}</p>
              </div>
              
              <div className="bg-white/10 rounded-2xl p-6">
                <h4 className="text-xl font-bold mb-3 text-cyan-300">ุงูุฑูู ุงููุฎุชุฒู</h4>
                <p className="text-3xl font-bold text-purple-400">{result.reducedNumber}</p>
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-8 mb-8">
              <div className="bg-gradient-to-r from-purple-600/30 to-pink-600/30 rounded-2xl p-6 border border-purple-400/30">
                <h4 className="text-xl font-bold mb-3 text-cyan-300">๐ฎ ุงูุฑูุฒ ุงูุทุงูู</h4>
                <p className="text-lg text-purple-300">{result.energySymbol}</p>
              </div>
              
              <div className="bg-gradient-to-r from-cyan-600/30 to-blue-600/30 rounded-2xl p-6 border border-cyan-400/30">
                <h4 className="text-xl font-bold mb-3 text-cyan-300">ุงูุชูุณูุฑ ุงูุฑูุญุงูู</h4>
                <p className="text-lg text-cyan-300">{result.interpretation}</p>
              </div>
            </div>
            
            <div className="bg-white/10 rounded-2xl p-6 mb-6">
              <h4 className="text-xl font-bold mb-4 text-cyan-300">ุชูุตูู ุงูุญุฑูู</h4>
              <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3">
                {result.letterValues.map((item: any, index: number) => (
                  <div key={index} className="bg-gradient-to-r from-purple-500/30 to-pink-500/30 rounded-lg p-3 text-center">
                    <div className="text-xl font-bold text-yellow-400">{item.letter}</div>
                    <div className="text-sm text-gray-300">{item.value}</div>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-gradient-to-r from-yellow-900/50 to-orange-900/50 rounded-2xl p-6 border border-yellow-500/30">
              <h4 className="text-xl font-bold mb-3 text-yellow-300">ุงููุนูู ุงูุฎูู</h4>
              <p className="text-gray-300 leading-relaxed">{result.hiddenMeaning}</p>
            </div>
            
            {/* AI Analysis Button and Results */}
            {apiKey.trim() && (
              <div className="mt-8">
                <button
                  onClick={() => getAIAnalysis(result)}
                  disabled={isAnalyzing}
                  className="w-full bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white font-bold py-4 px-8 rounded-xl text-lg transition-all duration-300 transform hover:scale-105 hover:shadow-2xl hover:shadow-purple-500/40 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none mb-6"
                >
                  <div className="flex items-center justify-center gap-3">
                    <Zap className={`w-6 h-6 ${isAnalyzing ? 'animate-spin' : ''}`} />
                    {isAnalyzing ? 'ุฌุงุฑู ุงูุชุญููู ุงูุฐูู...' : 'ุงุญุตู ุนูู ุงูุชุญููู ุงูุฐูู ุงููุชูุฏู'}
                  </div>
                </button>
                
                {aiAnalysis && (
                  <div className="bg-gradient-to-r from-purple-900/50 to-indigo-900/50 rounded-2xl p-6 border border-purple-500/30">
                    <h4 className="text-xl font-bold mb-4 text-purple-300 flex items-center gap-2">
                      <Bot className="w-5 h-5" />
                      ุงูุชุญููู ุงูุฐูู ุงููุชูุฏู
                    </h4>
                    <div className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                      {aiAnalysis}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default GematriCalculator;